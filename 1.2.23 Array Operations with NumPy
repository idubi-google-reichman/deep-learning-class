{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1a31QLOLewGvnyiZFtfZ6h41Veuj7eGZn","timestamp":1718520727032},{"file_id":"16NIUoP6LRoEK-_wQBQJOBtoMEwAAaEtx","timestamp":1718516142626}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["##Array Operations with NumPy\n","\n","NumPy is fundamental for numerical computing in Python. It provides support for arrays, matrices, and high-level mathematical functions.\n","\n","\n"],"metadata":{"id":"RyWf71FOZbg0"}},{"cell_type":"markdown","source":["Vectorized operations process multiple data elements simultaneously, unlike scalar operations that handle one at a time. This approach not only speeds up execution by leveraging parallel processing on modern CPUs and GPUs but also simplifies code by reducing the need for loops and complex instructions. This clarity and efficiency make vectorization ideal for handling large datasets in fields like machine learning and data analysis."],"metadata":{"id":"KfEHSZVoyEZo"}},{"cell_type":"markdown","source":["## Numpy array vs Python list"],"metadata":{"id":"Z9UrJDGczSye"}},{"cell_type":"code","source":["import numpy as np\n","\n","py_arr = [1, 2, 3, 4, 5]\n","# Create a NumPy array\n","arr = np.array(py_arr)\n","\n","# Array Operations\n","print(\"Original Array:\", arr)\n","\n","print(\"Python Array after 'multiplication':\", py_arr * 2)\n","print(\"Python Array after 'addition':\", py_arr + py_arr)\n","print(\"===\")\n","print(\"NumPy Array after multiplication:\", arr * 2)\n","print(\"NumPy Array after addition:\", arr + 5)\n","\n","py_arr.append(6)\n","#arr.append(6) - Impossible! numpy array shape cannot be changed."],"metadata":{"id":"UUWwAZljZb4X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718520848708,"user_tz":-180,"elapsed":4,"user":{"displayName":"Ido Bistry","userId":"08421266598341040031"}},"outputId":"35df180b-59c2-4ca8-9910-74354f3812e0"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Array: [1 2 3 4 5]\n","Python Array after 'multiplication': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n","Python Array after 'addition': [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n","===\n","NumPy Array after multiplication: [ 2  4  6  8 10]\n","NumPy Array after addition: [ 6  7  8  9 10]\n"]}]},{"cell_type":"code","source":["# Example of vector operations\n","vector1 = np.array([1, 2, 3])\n","vector2 = np.array([4, 5, 6])\n","\n","vec_sum = vector1 + vector2\n","vec_mul = vector1 * vector2\n","\n","print(\"Sum of two vectors:\")\n","print(vec_sum)\n","\n","print(\"Multiplication of two vectors:\")\n","print(vec_mul)"],"metadata":{"id":"EZdkxhEMaRC9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Understanding 2D Matrices, Indexing, and Slicing in NumPy\n","\n","A 2D array, or matrix, in NumPy is a grid of values. It is similar to a list of lists in Python. Indexing and slicing are vital for accessing and manipulating these matrices. Let's explore how to access elements, rows, columns, and sub-matrices in a 2D array."],"metadata":{"id":"1lLKEWV6z84u"}},{"cell_type":"code","source":["# Create a 2D array (matrix)\n","matrix = np.array([[10, 20, 30],\n","                   [40, 50, 60],\n","                   [70, 80, 90]])\n","\n","# Accessing a single element\n","# Remember: Indexing starts at 0\n","element = matrix[1, 2]  # Access the element at row 2, column 3\n","print(\"Accessed Element (row 2, column 3):\", element)\n","\n","# Accessing a whole row\n","row = matrix[0,:]  # Access the first row\n","print(\"First Row:\", row)\n","\n","# Accessing a whole column\n","column = matrix[:, 1]  # Access the second column\n","print(\"Second Column:\", column)\n","\n","# Slicing a sub-matrix\n","sub_matrix = matrix[0:2, 1:3]  # Access rows 1-2 and columns 2-3\n","print(\"Sub-Matrix (rows 1-2, columns 2-3):\", sub_matrix)"],"metadata":{"id":"T2cgoxWFz_bA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718521092689,"user_tz":-180,"elapsed":366,"user":{"displayName":"Ido Bistry","userId":"08421266598341040031"}},"outputId":"65cc8822-4a39-4811-c681-8d3f5aa6b954"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Accessed Element (row 2, column 3): 60\n","First Row: [10 20 30]\n","Second Column: [20 50 80]\n","Sub-Matrix (rows 1-2, columns 2-3): [[20 30]\n"," [50 60]]\n"]}]},{"cell_type":"markdown","source":["## Understanding Shapes in NumPy Arrays\n","\n","The shape of a NumPy array determines the number of elements in each dimension of the array. It is a tuple of integers that indicates the size of the array along each dimension. Understanding and manipulating the shape of arrays is fundamental to data manipulation and analysis in NumPy.\n"],"metadata":{"id":"ZyJ6nRO221R_"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Create a 2D array\n","matrix = np.array([[1, 2, 3], [4, 5, 6]])\n","\n","# Print the shape of the array\n","print(\"Shape of the matrix:\", matrix.shape)\n","\n","# Create a 3D array\n","array_3d = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n","\n","# Print the shape of the 3D array\n","print(\"Shape of the 3D array:\", array_3d.shape)\n"],"metadata":{"id":"Gvmdx_Pg25xQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718521299516,"user_tz":-180,"elapsed":316,"user":{"displayName":"Ido Bistry","userId":"08421266598341040031"}},"outputId":"77aa4cca-fd43-4ead-a01d-3bc08c5481a4"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of the matrix: (2, 3)\n","Shape of the 3D array: (2, 2, 2)\n"]}]},{"cell_type":"markdown","source":["## Sum, Mean, and Axis in 2D Arrays\n","\n","NumPy provides efficient ways to compute the sum and mean of elements in arrays. Understanding the concept of `axis` in these operations is crucial when working with multi-dimensional data. An `axis` in NumPy refers to the dimension along which a particular operation is performed. Here's how to use these operations in 2D arrays:\n"],"metadata":{"id":"iL_3zr7VqCjQ"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Create a 2D array\n","array_2d = np.array([[1, 2, 3],\n","                     [4, 5, 6],\n","                     [7, 8, 9]])\n","\n","# Compute the sum of all elements\n","total_sum = np.sum(array_2d)\n","print(\"Total sum of all elements:\", total_sum)\n","\n","# Compute the mean of all elements\n","total_mean = np.mean(array_2d)\n","print(\"Mean of all elements:\", total_mean)\n","\n","# Sum along axis 0 (down the rows / column-wise)\n","sum_axis0 = np.sum(array_2d, axis=0)\n","print(\"Sum along axis 0 (column sums):\", sum_axis0)\n","\n","# Sum along axis 1 (across the columns / row-wise)\n","sum_axis1 = np.sum(array_2d, axis=1)\n","print(\"Sum along axis 1 (row sums):\", sum_axis1)\n","\n","# Mean along axis 0\n","mean_axis0 = np.mean(array_2d, axis=0)\n","print(\"Mean along axis 0 (mean of each column):\", mean_axis0)\n","\n","# Mean along axis 1\n","mean_axis1 = np.mean(array_2d, axis=1)\n","print(\"Mean along axis 1 (mean of each row):\", mean_axis1)\n"],"metadata":{"id":"fwniOHuKqC6e"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Equality operations\n","\n","Equality and inequality are also vectoric operations in numpy"],"metadata":{"id":"HQPuUJsb1rG9"}},{"cell_type":"code","source":["v1 = [1,2,3,4,5]\n","print(v1==3)\n","\n","v1_numpy = np.array([1,2,3,4,5])\n","print(v1_numpy==3)\n","print(v1_numpy>=3)"],"metadata":{"id":"sgpFsii51uAY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Elements of matrix can also be selected by using a boolean mask"],"metadata":{"id":"S5Ji94r25_eO"}},{"cell_type":"code","source":["mask = np.array( [True,False,False,False,True])\n","print(v1_numpy[mask])"],"metadata":{"id":"ZbSJVx_q6JC0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["And we can combine selection with equality/inequality to do selections of data by rules:"],"metadata":{"id":"aZ-_S_XV6kI7"}},{"cell_type":"code","source":["print(v1_numpy[v1_numpy>2])"],"metadata":{"id":"d4DCbDAL6shI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Exercise - Implementing dot product"],"metadata":{"id":"M-GYNvoYqPEk"}},{"cell_type":"code","source":["#Dot product for vectors is defined as sum of elementwise multiplication.\n","# For vectors (v1,v2,...vn) , (w1,w2,...,wn) ->   v1*w1 + v2*w2 + ... vn*wn\n","#Implement dot product per axis. For example, if axis=0, on rows. If axis=1, columns\n","# v1 is numpy array\n","# v2 is numpy array\n","# Assume that v1 and v2 have the same size\n","def dot_product(v,w,axis=0):\n","  # return 0\n","  # *****SOLUTION*****\n","  # if axis == 0:\n","  #   return np.sum(v*w,axis=1)\n","  # else:\n","  return np.sum(v*w,axis)\n","  # *****SOLUTION*****\n","\n","m1 = np.array([[1,0,0],\n","               [0,1,1]])\n","\n","m2 = np.array([[1,2,3],\n","               [4,5,6]])\n","print( dot_product(m1,m2,axis = 0) )\n","print( dot_product(m1,m2,axis = 1) )"],"metadata":{"id":"IhJtfJ-7qPdL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718522135334,"user_tz":-180,"elapsed":339,"user":{"displayName":"Ido Bistry","userId":"08421266598341040031"}},"outputId":"a2be92ce-d7af-4a5e-bfd4-6a6d9844d4e2"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["[ 1 11]\n","[ 1 11]\n"]}]},{"cell_type":"markdown","source":["# Exercise - Magic Square\n","\n","A magic square is a grid of numbers where the sums of every row, column, and diagonal are equal.\n","\n","Write a function that tests whether an array is a magic square. Make sure to check the shape of the array first.\n","\n","Hints:\n","1. Use numpy function **np.diag** to get the values in the main diagonal\n","2. Use numpy function **np.fliplr** to get the values in the secondary diagonal"],"metadata":{"id":"c42LYH3nwzVq"}},{"cell_type":"code","source":["def magic_odd(n):\n","    if n % 2 == 0:\n","        raise ValueError('n must be odd')\n","    return np.mod((np.arange(n)[:, None] + np.arange(n)) + (n-1)//2+1, n)*n + \\\n","          np.mod((np.arange(1, n+1)[:, None] + 2*np.arange(n)), n) + 1\n","\n","m1 = magic_odd(3)\n","m2 = np.array( [[0,1,0],[0,2,0],[0,3,0]] )\n","m3 = magic_odd(5)\n","m4 = np.array( [[0,1],[0,2],[0,3]] )\n","m5 = np.array( [[0,1,2],[0,3,4]] )\n","\n","m6 = magic_odd(5)\n","m6[0,1] = 100\n","\n","def is_magic_square(arr):\n","\n","\n","  # ********* Write the code here **************\n","\n","  # ********* ******************* **************\n","\n","  return True\n","\n","print(is_magic_square(m1))\n","print(is_magic_square(m2))\n","print(is_magic_square(m3))\n","print(is_magic_square(m4))\n","print(is_magic_square(m5))\n","print(is_magic_square(m6))"],"metadata":{"id":"e015nHDGxinR"},"execution_count":null,"outputs":[]}]}